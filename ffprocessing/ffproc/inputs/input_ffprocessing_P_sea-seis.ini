[section_phase]
ph_phase = 'P'
# If you want to give horizontal components for S wave measruemtns,
# first component N the second E! e.g.: ['?HN', '?HE']
ph_channel = ['HHZ']
# tag ph_horizontal only needed when ph_phase='S' otherwise not read;
# decide on whether measure T(ransversal) or R(adial) component
ph_horizontal = 'R'
# process hydrophone data? pyffproc will stop working if not clearly stated!
# ph_channel = ['BDH'] and proc_hydrophone = True
proc_hydrophone = False
# select epicentral distance
ph_min_epi = 32.
ph_max_epi = 85.
# Background model
ph_bg = 'IASP91'
# sampling rate, lanczos method will be used for this reason
ph_sampling_rate = 10.
# preset and offset for reading the data,
# later (depends on the method), this can be changed
ph_preset = 100
ph_offset = 50
# Static preset and offset
# ph_static_preset/offset will be considered for the final length of CC or
# any other measurements
# In other words:
# ph_preset/offset (above): are used for ONLY cutting the waveforms. Take
#                           generous values as we do tapering.
# ph_static_preset/offset: are used for actual measurement (after filtering).
ph_static_preset = 10
ph_static_offset = 10

########## Examples
#ph_phase = 'P,Pdiff'
#ph_channel = ['BDH']
###################

[section_check]
# Force to process all events (even if they already exist)
force_process = False
# check all the selected events (plotting)
check_evs = True
# check the theoretical arrival times
check_ttime = True
# check both the event and stations,
# only plots for one event
check_ev_stas = True
# check the cut syntehtic waveforms
check_cut_syn = True
# check the cut real waveforms
check_cut_real = True
# plot real and synthetic waveforms top of each other
# this will be run for different bands (set the following three flags)
check_cut_real_syn = True
# plot real and synthetic waveforms top of each other and the spectra of
# real data and gabor filter
check_cut_real_syn_gabor = False
check_bands = 1-8
# minimum cross-correlation factor to be used for plotting
check_min_cc = 0.7
# plotting the projection of the measrurements on the glob
check_measured_glob = False

[section_real]
# real_mode = 'ami' OR 'read' so far
# 'read' is the standard one for obspyDMT downloaded events
real_mode = 'obs'
; real_path = '/mnt/amifits/data'
# ATTENTION if SEA-SEIS data then you have to change in StationClass the folder the data is in
# e.g default is mseed but it can be also mseed_noskew, or mseed_resample
real_path = '/mnt/seismodata2/SEA-SEIS/MAIN/DATA_1220'
# The directory name in each event folder in which the real data is stored
# if >>data_structure_ami = True<< then "real_name_format" will not be read
# if >>real_mode = obs<< then >>real_name_format<< is the path to the station_information file
;real_name_formmat = 'processed'
real_name_format = '/mnt/home_geo/mariat/Codes/_INPUT_/Coordinate_Files/SEA-SEIS_station_information.txt'
# id_state::
# {0}: use everything (refer to real_id then);
# {1}: use id_list;
# {2}: use everything but id list;
real_id_state = 0
real_id_list = ['TA.C*.*.*', 'TA.F*.*.*', 'TA.G*.*.*', 'TA.M*.*.*']
real_id = '*.*.*.*'
;real_rect = -180./180./-90./-30.
real_rect = -180./180./-90./90.
real_min_azi = 0
real_max_azi = 360
# integrate real data
int_real = False

########## Examples
# 'double' mode is there for hydrophone data (plotting tool) and loading
# for comparison displacment and pressure data;
# could work with two channels too
#real_mode = 'double'

# YSPEC example
#real_path = '/home/hosseini/Work/Scripts/gitHUB/pyffproc/data/real_event'
# DMT example
#real_path = '/home/hosseini/local/src/obspyDMT/obspyDMT/synth_test/2014-07-21_2014-08-01_6.8_9.9'
# psdata example
#real_path = '/home/hosseini/local/src/obspyDMT/obspyDMT/STF/data'
#real_path = '/import/neptun-radler/AmplitudeProjects/psdata'
###################

[section_syn]
# read: in case of YSPEC synthetics
# instaseis: to work with the database mode
# WARNING: In case that you want to work with instaseis over ssh:
# python -m instaseis.server --port 8765 --buffer_size_in_mb 1024 IRIS_AK135f
# and then give the address in syn_path
# specfem: for testing purposes
syn_mode = 'instaseis'
;syn_path = '/mnt/seismodata/MT/IASP91'
syn_path = '/mnt/seismodata/MT/IASP91'
# The directory name in each event folder in which the synthetics are stored
syn_name_format = 'BH'
# integrate synthetic data
int_syn = False

########## Examples
#syn_mode = 'specfem'

# YSPEC example
#syn_path = '/home/hosseini/Work/Scripts/gitHUB/pyffproc/data/syn_event'
# instaseis example
#syn_path = 'http://hopfen:8765'
#syn_path = '/import/neptun-seismology/instaseis/IASP91'
#syn_path = '/media/hosseini/KINGSTON/iasp91_database'
#syn_path = '/Volumes/AB_EXTRA/IASP91'

#syn_name_format = 'SAC_realName'
###################

[section_event]
# reading the event information mode
# read: read from the archive (similar to our original method)
# read_dmt: read archive retrieved with obspyDMT
# read_ami: if >>data_structure_ami = True<< then this one should be read_ami to extract event information
# read_obs: is similar to read_dmt but for OBS miniseed data: EVENTS-INFO folder is read and contains all event information
#       for the period of time

; evproc_mode = 'read_dmt'
; evproc_path = '/mnt/amifits/data'
evproc_mode = 'read_obs'
evproc_path = '/mnt/home_geo/mariat/Codes/_INPUT_/neic_2018_2020'
evproc_name_format = '*_*'
evproc_min_mag = -10.
evproc_max_mag = 10.
evproc_min_depth = -10.
evproc_max_depth = 2000.
evproc_min_year = 1900
evproc_max_year = 2050

# evproc_year_list is only used if read_ami is used to only use specific year and reduce reading times of
# event information
evproc_year_list = ['2017', '2018']
evproc_rect = -180./180./-90./90.

# for testing purposes only process selected events?
selected_events = True

########## Examples
# read example
#evproc_path = '/home/hosseini/Work/Scripts/gitHUB/pyffproc/data/processed_event'
#evproc_path = '/import/neptun-radler/AmplitudeProjects/pdata_processed/psdata_events'
# DMT example
#evproc_path = '/home/hosseini/local/src/obspyDMT/obspyDMT/synth_test/2014-07-21_2014-08-01_6.8_9.9'
#evproc_path = '/home/hosseini/local/src/obspyDMT/obspyDMT/STF/stf'
#evproc_path  = '/Users/maria/PhD/STF/RHUM-RUM_STF'
###################

[section_stf]
# reading the event information mode
# read: read from the archive (similar to our original method)
# read_dmt: read archive retrieved with obspyDMT
# read_scardec: read scardec archive
# none: do nothing, simply
# stf_mode = 'read_dmt'
stf_mode = 'read_scardec'
# in case you are using a scardec database give path
stf_scardec_db = '/mnt/home_geo/mariat/DIAS/SCARDEC/ALL_MOY_and_OPTI_Nov_2019_MAJ_till_31122018'
# if event quality >= stf_min_qual: use the inverted STF
# else: it uses halfduration to create a STF
# 5: very good | 1: very bad
stf_min_qual = 3.0

########## OLD
# also convolve the "real" seismogram with stf?
# This is useful for "specfem" mode, i.e. for testing purposes
#conv_real_stf = False

[section_measurement]
# CC-2step: original matlab code in which first the waveforms are aligned in
# the lowest frequency band and then CC is applied for all others
# CC-2step-env: similar to CC-2step but in the second step finds the
# time-window from the envelope
mmeant_mode = 'CC-2step'
# maximum time in the first and second CC steps
mmeant_clip_time1 = 7.
mmeant_clip_time2 = 3.
# calculate SNR?
mmeant_calc_snr = True

[section_output]
# original_ffprocessing: similar to the original MATLAB code (RunFFprocessing)
output_format = 'original_ffprocessing'
# output_dir = '/mnt/seismodata2/MT/SEA-SEIS/ffproc/SEA-SEIS_14122020'
output_dir = '/mnt/seismodata2/MT/SEA-SEIS/ffproc/SEA-SEIS_21.01.2021'
# If you want to save the cut and filtered arrays as traces
save_smgr = False
only_pre_process = False

[section_kernel]
kernel_output = True
# P/S wave
kernel_ps = 'P'
kernel_comp = 'Z'
kernel_misfit = 'CC'
kernel_min_cc = 0.8

# Inverted STFs do not look like normal STFs (start from zero and end at zero) 
# as they are the results of the inversion (they can be arbitrarily complex).
# To avoid artifacts in the kernel code, STFs can be created as follow:
# 1. integral (cumulative sum) over the first STF
# 2. define the half duration as
#               (Time for 90% of the energy in the first STF)/2.
# 3. creating a Gaussian shape STF out of the half duration.
# 4. save at stf.dat
# WARNING: STF with the above method does not incorporate all 
# the high-frequency contents in our STFs.
kernel_stf_gauss = False

[section_filter]
filt_mode = 'log-gabor'

[section_log_gabor]
# Only if filt_mode in section_filter is selected as log-gabor
# center period in sec of lowest passband filter
lgb_filt_pmax = 30
# number of bandpass filters (scales)
lgb_filt_nscale = 8
# multiplicative scale factor of filter center freqs
lgb_filt_fmult = 1.4142
# is the (fixed) ratio of sigma divided by fc, where sigma is the standard
# deviation of the Gaussian that describes the log-Gabor filter in the *time*
# domain, and fc is the filter's center frequency. Hence larger sigmaIfc means
# narrower bandwidth
lgb_filt_sigmaIfc = 0.85
# desired length of zero-padded time series Choose npad>=size(tsin,1)
lgb_filt_npad = 1024
lgb_filt_energy_frac = 0.95
# lgb_filt_nlambda = 2.0 # time window changes gets bigger here
lgb_filt_nlambda = 1.0

[section_ami]
# in order to accomodate the folder structure used in DIAS
# if FALSE then proceed as normal with obspyDMT folder structure
# if TRUE then all relevant inputs stay the same and the code automatically searches the corresponding
#         information in the AMI folder structure
data_structure_ami = False

[section_obs]

# where to find the instrument correction files
correction_hydrophone = '/mnt/home_geo/mariat/Codes/_INPUT_/6d6-response/resp/6D6-HTI-04-PCA-ULF-INA200M-250sps.resp'
correction_seismometer = '/mnt/home_geo/mariat/Codes/_INPUT_/6d6-response/resp/6D6-Trillium-250sps.resp'

trace_pre_filt = [1./200, 1./150, 10, 20]
trace_unit = 'DISP'
trace_waterlevel = 60.
trace_taper = 0.05

# since OBS are not oriented we are measuring in this step the particle motion and write it out
particle_motion = False
